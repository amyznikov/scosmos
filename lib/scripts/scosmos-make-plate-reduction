#! /usr/bin/octave -qf

format short;
ignore_function_time_stamp("all");
if ( exist(__sub=sprintf("%s/octave",pwd()),'dir' ) )
  addpath(__sub);
endif


###########################################################################

arg_list = argv ();

if ( nargin < 1 )
  printf ("Usage:\n");
  printf ("  %s  [-m model] [-mm model] [-gc] [-K threshold] reference-catalog-names plateid [...]\n", program_name ());
  printf ("Examples\n");
  printf ("  %s ucac4 1\n", program_name ());
  printf ("  %s ucac4 xsc:15-22  1\n", program_name ());
  return;
end


gc       = 0;
K        = 3;
model    = "";
usemags  = 0;
plateids = [];
refnames = {};
minmags  = [];
maxmags  = [];


i = 0;
while  ( ++i <= nargin )

  arg = arg_list{i};
  
  if ( strcmp(arg,"-gc") )
    gc = 1;
    continue;
  end

  if ( strcmp(arg,"-K") )  
    if ( i++ > nargin )
      fprintf(stderr,"Error: missing value after -K argument\n");
      return;
    end    
    [K, status] = str2num(arg_list{i});
    if ( !status || size(K,1) != 1 )
      fprintf(stderr,"Error: invalid value for K threshold: %s\n", arg_list{i});
      return;
    end
    continue;
  end

  if ( strcmp(arg,"-m") )  
  
    if ( !strcmp(model,"") )
      fprintf(stderr,"Error: model already defined as '%s'\n", model);
      return;
    end

    if ( i++ > nargin )
      fprintf(stderr,"Error: missing model name after -m argument\n");
      return;
    end
    
    model = arg_list{i};
    continue;
  end
  
  if ( strcmp(arg,"-mm") )  
  
    if ( !strcmp(model,"") )
      fprintf(stderr,"Error: model already defined as '%s'\n", model);
      return;
    end

    if ( i++ > nargin )
      fprintf(stderr,"Error: missing model name after -m argument\n");
      return;
    end
    
    model = arg_list{i};
    usemags = 1;
    continue;
  end
  
  if ( isalpha( arg(1) ) )
    names = strsplit(arg,",");
    for j = 1:size(names,2)
      n = strsplit(names{j},":");
      refnames{ size(refnames,2) + 1 } = n{1};
      
      if ( size(n,2) > 1 )
        minmags( size(minmags,2) + 1 ) = str2num(n{2});
      else 
        minmags( size(minmags,2) + 1 ) = -10;
      end

      if ( size(n,2) > 2 )
        maxmags( size(maxmags,2) + 1 ) = str2num(n{3});
      else 
        maxmags( size(maxmags,2) + 1 ) = +24;
      end
      
    end
    continue;
  end
  
  [x, state] = str2num(arg);
  if ( state )
    for j=1:size(x,2)
      plateids( size(plateids,2) + 1 ) = x(j);
    end
    continue;
  end
    
  fprintf(stderr,"Invalid argument %s\n", arg);
  return;
end

###########################################################################

for i=1:size(refnames,2)
  printf("%s %g %g\n", refnames{i}, minmags(i), maxmags(i) );
end;



###########################################################################

function make_reduction( plate_list )

  spath = "scosmos";
  cpath = "reduction-residuals";

  syscall(sprintf("mkdir -p %s", cpath));
  if ( gc )
    syscall(sprintf("mkdir -p %s", spath));
  end

  for i = 1:size(plate_list,1)

    pid = plate_list(i);

    cname = sprintf("%s/%d.dat",cpath,pid);
    sname = sprintf("%s/%d.dat",spath,pid);

    if ( exist(cname,"file") && (!gc || exist(sname,"file")) )
      printf("%d looks processed: skip it\n", pid);
      continue;
    endif
    
    # get plate info
    [A0, D0, EPOCH, X0, Y0] = ssa_plate_info( pid );
    printf("plate:  %d\n"  , pid );
    printf("A0   :  %g\n"  , A0 * 180 / pi );
    printf("D0   :  %+g\n" , D0 * 180 / pi );
    printf("EPOCH:  %.3f\n", EPOCH );


    #
    # load reference stars from all reference catalogues
    #
    
    x    = [];
    y    = []; 
    mag  = []; 
    xtan = []; 
    ytan = [];  
    ra   = [];
    dec  = [];
    
    fail = 0;
    for j = 1:size(refnames,2)
      [xt, yt, mt, xtant, ytant, rat, dect ] = load_reference_stars( refnames{j}, pid, minmag{j}, maxmag{j} );
      if  size( xt < 1) 
        fprintf(stderr,"load_reference_stars(%s) fails\n", refnames{j});
        fail = 1;
	break;
      endif
	
      x = [ x; xt ];
      y = [ y; yt ];
      mag = [ mag; mt ];
      xtan = [ xtan; xtant ];
      ytan = [ ytan; ytant ];
      ra = [ ra; rat ];
      dec = [ dec; dect ];
    endfor

    if ( fail || size(x,2) < 150 )
      printf("Too small number of reference stars in %s: %d\n",refnames{j}, size(x,2));
      continue;
    endif

    
    # make reduction x,y -> xtan,ytan
    [coefx, coefy ] = cxy2tan( K, x, y, xtan, ytan, @xy2tan );
    
    
    # calc residuals
    [mx, my] = xy2tan(x,y);
    dx = (xtan - mx * coefx) * 180*3600 / pi;
    dy = (ytan - my * coefy) * 180*3600 / pi;


    # save residuals
    fid = fopen(cname,"w");
    fprintf(fid,"ra\tdec\tmag\tx\ty\txtan\tytan\tdx\tdy\n");
    fprintf(fid,"%+15.9f\t%+15.9f\t%+8.3f\t%+12.2f\t%+12.2f\t%+20.15E\t%+20.15E\t%+8.3f\t%+8.3f\n", 
      transpose([ra dec mag x y xtan ytan dx dy]));
    fclose(fid);
    printf("%s saved\n", cname);



    # check if apply solution for target stars is requested
    if ( !gc )
      continue;
    end


    [ objID xmin xmax ymin ymax area ipeak cosmag isky \
       x y aU bU thetaU aI bI thetaI class pa ap1 ap2 ap3 ap4 ap5 ap6 ap7 ap8 \
        blend quality prfStat prfMag gMag sMag ] = load_targets( plateid );


    if ( size( objID ) < 1 ) 
      fprintf(stderr,"load_targets(pid=%d) fails", pid );
      continue;
    end

    xmin -= X0;
    ymin -= Y0;
    xmax -= X0;
    ymax -= Y0;
    x    -= X0;
    y    -= Y0;

    # generate model 
    [mx, my] = xy2tan(x, y);

    # apply model
    xtan = mx * coefx;
    ytan = my * coefy;

    # convert to celestial sphere
    [ra, dec] = tan2cs(A0, D0, xtan, ytan );

    # generate ecpoch column
    epoch = EPOCH * ones(size(objID));

    # write generated catalog
    fid = fopen(sname,"w");
    fprintf(fid,"objID\tra\tdec\tepoch\txmin\txmax\tymin\tymax\tarea\tipeak\tcosmag\tisky\tx\ty\taU\tbU\tthetaU\taI\tbI\tthetaI\tclass\tpa\tap1\tap2\tap3\tap4\tap5\tap6\tap7\tap8\tblend\tquality\tprfStat\tprfMag\tgMag\tsMag\n");
    fprintf(fid,"%9d\t%+15.9f\t%+15.9f\t%+9.3f\t%+10.2f\t%+10.2f\t%+10.2f\t%+10.2f\t%6d\t%10d\t%+8.3f\t%10d\t%+10.2f\t%+10.2f\t%8.2f\t%8.2f\t%3d\t%8.2f\t%8.2f\t%3d\t%1d\t%3d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%3d\t%6d\t%+9.3f\t%+9.3f\t%+9.3f\t%+9.3f\n",
      transpose([ objID ra dec epoch  xmin xmax ymin ymax area ipeak cosmag isky x y aU bU thetaU aI bI thetaI class pa ap1 ap2 ap3 ap4 ap5 ap6 ap7 ap8 blend quality prfStat prfMag gMag sMag ]));
    fclose(fid);
    printf("%s saved\n", sname);

  endfor

end



# Process plates
for i=1:size(plateids,2)

  pid = plateids(i);
  
  if ( pid <= 9 )
    plate_list = ssa_plate_list(pid);
  else 
    plate_list = [ pid ];
  end
  
  for j = 1:size(plate_list)
  
    pid = plate_list(j);
    sid = ssa_surveyid(pid);

    printf("\n***\nPLATE %s/%d/%d\n", refname, sid, pid);
    make_reduction( pid );
  end
  
end

